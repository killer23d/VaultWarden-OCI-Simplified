# VaultWarden-OCI-NG Environment Configuration
# This file serves as the single source of truth for all configuration variables
# Generated by setup.sh

# Domain Configuration
DOMAIN=vault.example.com
ADMIN_EMAIL=admin@example.com

# Project Configuration  
PROJECT_NAME=vaultwarden-oci
PROJECT_STATE_DIR=/var/lib/vaultwarden
COMPOSE_PROJECT_NAME=vaultwarden

# === PRIORITY 3 FIX: Explicit Version Variables ===
# These ensure docker-compose.yml uses versions from here, not fallback defaults
VAULTWARDEN_VERSION=1.30.5
CADDY_VERSION=2.7.6  
FAIL2BAN_VERSION=1.1.0
DDCLIENT_VERSION=3.11.2

# VaultWarden Configuration
VAULTWARDEN_DATA_FOLDER=/var/lib/vaultwarden/data
VAULTWARDEN_LOG_LEVEL=info

# Caddy Configuration
CADDY_DATA_DIR=/var/lib/vaultwarden/caddy
CADDY_CONFIG_DIR=./caddy

# fail2ban Configuration
FAIL2BAN_CONFIG_DIR=./fail2ban
FAIL2BAN_LOG_LEVEL=INFO

# Backup Configuration
BACKUP_RETENTION_DAYS=30
BACKUP_ENCRYPTION=age
# --- START P1: Add Rclone config ---
# Rclone remote name (configure with 'rclone config')
RCLONE_REMOTE_NAME=MyCloudStorage
# --- END P1 ---

# Network Configuration
DOCKER_NETWORK_NAME=vaultwarden_network

# === Resource Limits (optimized for small VMs) ===
VAULTWARDEN_MEMORY_LIMIT=1g
CADDY_MEMORY_LIMIT=128m
FAIL2BAN_MEMORY_LIMIT=64m

# --- Cloudflare & DDClient (REQUIRED) ---
# Find this on your Cloudflare dashboard
CLOUDFLARE_ZONE_ID=CHANGE_ME
# The full domain name to update (e.g., vault.example.com)
DDCLIENT_HOSTNAME=vault.example.com

# === PRIORITY 3 FIX: Secrets Environment Variables ===
# These are populated by startup.sh from encrypted secrets
ADMIN_BASIC_AUTH_HASH=
CLOUDFLARE_API_TOKEN=

# Optional: SMTP Configuration (set in secrets, referenced here)
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURITY=starttls
SMTP_USERNAME=
# SMTP_PASSWORD is handled via Docker secrets, not environment variables

# Optional: Push Notifications (set via secrets)
# PUSH_INSTALLATION_KEY handled via Docker secrets

# === Docker Compose Override Support ===
# Set to true to enable development overrides
COMPOSE_FILE=docker-compose.yml
# Uncomment for development: COMPOSE_FILE=docker-compose.yml:docker-compose.override.yml


### 4. `backup.sh`

**Fixes Applied:**
* **P1:** Added `--rclone` and `--email` flags.
* **P1:** Added `rclone_sync_offsite` function.
* **User Suggestion:** Added backup size validation (local vs. remote) inside `rclone_sync_offsite`.
* **P1:** Calls `send_notification_email` after a successful sync *or* a local backup if flags are set.


http://googleusercontent.com/immersive_entry_chip/2

### 5. `health.sh`

**Fixes Applied:**
* **P2:** Added `--email-alert` flag.
* **User Suggestion:** Added `check_backup_space` function.
* **P2:** Modified `main` to call `send_notification_email` if `ERRORS > 0` and the alert flag is set.


http://googleusercontent.com/immersive_entry_chip/3

### 6. `update.sh`

**Fixes Applied:**
* **P3:** Modified `update_system` to use fully unattended `apt-get` flags.
* **P3:** Added logic to check for `/var/run/reboot-required` and trigger `sudo reboot` if found (and `--force` is used, which cron does).
* **P2:** Added `send_notification_email` call in the `main` function to provide a summary of the update actions.


http://googleusercontent.com/immersive_entry_chip/4

### 7. `cron-setup.sh`

**Fixes Applied:**
* **P1:** Added the `--rclone` and `--email` flags to the `backup.sh` cron jobs.
* **P2:** Added the `--email-alert` flag to the `health.sh` cron job.


http://googleusercontent.com/immersive_entry_chip/5
