# Caddyfile for VaultWarden-OCI-NG

{
    # Global options
    email {$ADMIN_EMAIL}
    acme_ca https://acme-v02.api.letsencrypt.org/directory
    # acme_dns cloudflare {env.CLOUDFLARE_API_TOKEN} # Uncomment if using DNS challenge

    # Import the Cloudflare IP ranges to trust them as a proxy
    import /etc/caddy/cloudflare-ips.caddy
}

# Main site configuration for your domain (variable {$DOMAIN} comes from .env, no protocol)
https://{$DOMAIN} {
    # P3 FIX: Define named matchers at the top for better readability
    @admin path /admin*
    @notifications path /notifications/hub*

    # Trust proxies matching the imported Cloudflare IP ranges
    # This ensures X-Real-IP etc. are correctly populated from Cloudflare headers
    trusted_proxies @cloudflare

    # Enable modern compression
    encode gzip zstd

    # Secure the /admin endpoint with Basic Authentication and Rate Limiting
    # The hash {$ADMIN_BASIC_AUTH_HASH} is provided via environment variable from secrets
    rate_limit @admin 5r/m
    basicauth @admin {
        admin {$ADMIN_BASIC_AUTH_HASH}
    }
    reverse_proxy @admin vaultwarden:8080 {
        header_up X-Real-IP {http.request.header.CF-Connecting-IP} # Pass Cloudflare IP
    }

    # Notifications endpoint for Bitwarden clients (WebSockets)
    # Vaultwarden runs websockets on port 3012 by default when WEBSOCKET_ENABLED=true
    reverse_proxy @notifications vaultwarden:3012 {
        header_up X-Real-IP {http.request.header.CF-Connecting-IP} # Pass Cloudflare IP
    }

    # Main application proxy (all other requests)
    reverse_proxy vaultwarden:8080 {
        header_up X-Real-IP {http.request.header.CF-Connecting-IP} # Pass Cloudflare IP
    }

    # Logging configuration (consistent with Docker logging where possible)
    log {
        output file /var/log/caddy/access.log {
            roll_size 10mb  # Roll logs after 10 MB (matches Docker)
            roll_keep 5     # Keep 5 rolled files (matches Docker)
            roll_keep_for 720h # Keep files for 30 days max (time-based secondary cleanup)
        }
        format json
    }

    # Security Headers
    header {
        # Remove server information for security
        -Server
        # Enforce HTTPS and preload HSTS (ensure domain is stable before enabling preload)
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        # Prevent content type sniffing
        X-Content-Type-Options "nosniff"
        # Prevent clickjacking
        X-Frame-Options "DENY"
        # Control referrer information
        Referrer-Policy "strict-origin-when-cross-origin"
        # Content Security Policy - Allows self, inline scripts/styles (needed by web vault),
        # data URIs for images, and WebSocket connections to self.
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' wss://{$DOMAIN}; form-action 'self'; base-uri 'self';"
    }
}

# Global HTTP to HTTPS redirect for the main domain
http://{$DOMAIN} {
    redir https://{host}{uri} permanent
}

# Optional: Add a simple health check endpoint if needed by external monitors
# http://:8081 {
#    respond /health "OK" 200
# }
